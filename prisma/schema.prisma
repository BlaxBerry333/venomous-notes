generator client {
  provider = "prisma-client-js"
  output   = "../src/.generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====================================================================================================
// user's type
// ====================================================================================================
enum UserType {
  super_user
  normal_user
}

// ====================================================================================================
// user
// ====================================================================================================
model User {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  type            UserType
  name            String
  email           String            @unique
  password        String
  memos           Memo[]
  articles        Article[]
  foreignLanguage ForeignLanguage[]

  @@map("users")
}

// ====================================================================================================
// memo
// ====================================================================================================
model Memo {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  content   String

  @@index([userId])
  @@map("memos")
}

// ====================================================================================================
// article
// ====================================================================================================
model Article {
  id       String           @id @default(uuid())
  userId   String           @map("user_id")
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  title    String
  imgUrl   String?
  orders   Int              @default(0) // chapter 章节数
  chapters ArticleChapter[]

  @@index([userId])
  @@map("articles")
}

// ====================================================================================================
// article's chapter
// ====================================================================================================
model ArticleChapter {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  articleId String   @map("article_id")
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  title     String
  order     Int // chapter 章节顺序 
  content   String

  @@index([articleId])
  @@map("article_chapters")
}

// ====================================================================================================
// foreign language
// ====================================================================================================
model ForeignLanguage {
  id          String                      @id @default(uuid())
  createdAt   DateTime                    @default(now()) @map("created_at")
  updatedAt   DateTime                    @updatedAt @map("updated_at")
  userId      String                      @map("user_id")
  user        User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
  language    String
  words       ForeignLanguageWord[]
  expressions ForeignLanguageExpression[]

  @@index([userId])
  @@map("foreign_language")
}

// ====================================================================================================
// foreign language‘s word
// ====================================================================================================
model ForeignLanguageWord {
  id                 String          @id @default(uuid())
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  shouldReviewAt     DateTime?       @map("should_review_at")
  foreignLanguageId  String          @map("foreign_language_id")
  foreignLanguage    ForeignLanguage @relation(fields: [foreignLanguageId], references: [id], onDelete: Cascade)
  word               String
  translation        String?
  pronunciationAudio String?
  exampleSentence    String?

  @@index([foreignLanguageId])
  @@map("foreign_language_words")
}

// ====================================================================================================
// foreign language‘s expression
// ====================================================================================================
model ForeignLanguageExpression {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  foreignLanguageId String          @map("foreign_language_id")
  foreignLanguage   ForeignLanguage @relation(fields: [foreignLanguageId], references: [id], onDelete: Cascade)
  expression        String
  translation       String?

  @@index([foreignLanguageId])
  @@map("foreign_language_expressions")
}
